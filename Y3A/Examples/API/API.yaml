AWSTemplateFormatVersion: '2010-09-09'
Description: API

# Parameters:
#   Name:
#     Type: String
#     Description: Name of resources

Resources:

  # LambdaExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Principal:
  #             Service: "lambda.amazonaws.com"
  #           Action: "sts:AssumeRole"
  #     Path: "/"
  #     Policies:
  #       - PolicyName: LambdaExecutionPolicy
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: "Allow"
  #               Action:
  #                 - "logs:CreateLogGroup"
  #                 - "logs:CreateLogStream"
  #                 - "logs:PutLogEvents"
  #               Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}"
      Description: AWS Lambda function
      # Role for lambda
      # Role: !Ref LambdaExecutionRole
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/tomasz-api-hello-world-role-53pra235"
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Code:
        ZipFile: |
          def handler(event, context):
          pass
      MemorySize: 256
      Timeout: 60

  # ApiGatewayIamRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Sid: ''
  #           Effect: 'Allow'
  #           Principal:
  #             Service:
  #               - 'apigateway.amazonaws.com'
  #           Action:
  #             - 'sts:AssumeRole'
  #     Path: '/'
  #     Policies:
  #       - PolicyName: LambdaAccess
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: 'Allow'
  #               Action: 'lambda:*'
  #               # Resource: !GetAtt LambdaFunction.Arn
  #               Resource: "*"

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub "${AWS::StackName}"
      Description: Labs API Gateway
      FailOnWarnings: true

  ApiMethodRootGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        ConnectionType: INTERNET
        # Credentials: !GetAtt ApiGatewayIamRole.Arn
        Credentials: "arn:aws:iam::047989593255:role/pavel-api-ApiGatewayIamRole-Gj7tiqWoM7ex"
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200

  ApiMethodRootPost:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        ConnectionType: INTERNET
        # Credentials: !GetAtt ApiGatewayIamRole.Arn
        Credentials: "arn:aws:iam::047989593255:role/pavel-api-ApiGatewayIamRole-Gj7tiqWoM7ex"
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: '{labs+}'

  ApiMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        ConnectionType: INTERNET
        # Credentials: !GetAtt ApiGatewayIamRole.Arn
        Credentials: "arn:aws:iam::047989593255:role/pavel-api-ApiGatewayIamRole-Gj7tiqWoM7ex"
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200

  ApiMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        ConnectionType: INTERNET
        # Credentials: !GetAtt ApiGatewayIamRole.Arn
        Credentials: "arn:aws:iam::047989593255:role/pavel-api-ApiGatewayIamRole-Gj7tiqWoM7ex"
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200


  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'dev'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiMethodRootGet
      - ApiMethodRootPost
      - ApiMethodGet
      - ApiMethodPost
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "${AWS::StackName}.cctstudents.com"
      EndpointConfiguration:
        Types:
          - REGIONAL
      # Certificate
      RegionalCertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/29f1498c-1e4c-46f0-aa03-0a2a388c8f2a"
      SecurityPolicy: TLS_1_2

  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Sub "${AWS::StackName}.cctstudents.com"
      RestApiId: !Ref ApiGatewayRestApi
      Stage: !Ref ApiGatewayStage

  ApiGatewayRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      # cctstudents.com id
      HostedZoneId: "Z0377007Q8BSIW3W8YMM"
      Name: !Sub "${AWS::StackName}.cctstudents.com."
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt ApiGatewayCustomDomain.RegionalHostedZoneId
        DNSName: !GetAtt ApiGatewayCustomDomain.RegionalDomainName

  StaticWebsiteHostingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AWS::StackName}.cctstudents.com"
      WebsiteConfiguration:
        IndexDocument: index.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  