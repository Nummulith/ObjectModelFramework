# https://nickolaskraus.io/articles/creating-an-amazon-api-gateway-with-a-lambda-integration-using-cloudformation/

AWSTemplateFormatVersion: '2010-09-09'

Description: AWS API Gateway with a Lambda Integration

Resources:

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
          - EDGE
      Name: lambda-api

  ApiMethodRootGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        ConnectionType: INTERNET
        # Credentials: !GetAtt ApiGatewayIamRole.Arn
        Credentials: "arn:aws:iam::047989593255:role/LAB-ApiGatewayIamRole-mgbWB3YFQ2we"
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200

  ApiMethodRootPost:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        ConnectionType: INTERNET
        # Credentials: !GetAtt ApiGatewayIamRole.Arn
        Credentials: "arn:aws:iam::047989593255:role/LAB-ApiGatewayIamRole-mgbWB3YFQ2we"
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'lambda'

  ApiMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      ApiKeyRequired: false
      AuthorizationType: NONE
#      OperationName: 'lambda'
      Integration:
        ConnectionType: INTERNET
        # Credentials: !GetAtt ApiGatewayIamRole.Arn
        Credentials: "arn:aws:iam::047989593255:role/LAB-ApiGatewayIamRole-mgbWB3YFQ2we"
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200

  ApiMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      ApiKeyRequired: false
      AuthorizationType: NONE
#      OperationName: 'lambda'
      Integration:
        ConnectionType: INTERNET
        # Credentials: !GetAtt ApiGatewayIamRole.Arn
        Credentials: "arn:aws:iam::047989593255:role/LAB-ApiGatewayIamRole-mgbWB3YFQ2we"
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'v0'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiMethodRootGet
      - ApiMethodRootPost
      - ApiMethodGet
      - ApiMethodPost
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  # ApiGatewayIamRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Sid: ''
  #           Effect: 'Allow'
  #           Principal:
  #             Service:
  #               - 'apigateway.amazonaws.com'
  #           Action:
  #             - 'sts:AssumeRole'
  #     Path: '/'
  #     Policies:
  #       - PolicyName: LambdaAccess
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: 'Allow'
  #               Action: 'lambda:*'
  #               Resource: !GetAtt LambdaFunction.Arn

# When you add the method to aws apigw resource - it says You are about to give API Gateway permission to invoke your Lambda function: ...
# If I agree - what technically will happend?
# what permission will be added and where I can see that permission in console?

# When you add a method to an AWS API Gateway resource and configure it to integrate with a Lambda function, API Gateway needs permission to invoke that Lambda function on your behalf. This is because API Gateway acts as a client to the Lambda service, making requests to execute your function when an API endpoint is called.
# When you agree to give API Gateway permission to invoke your Lambda function, AWS creates an IAM role and a corresponding IAM policy. This IAM policy grants API Gateway the necessary permissions to invoke the Lambda function.

# Here's what happens technically:
# IAM Role Creation: AWS creates an IAM role specifically for API Gateway to assume when invoking the Lambda function. This role is automatically named based on your API Gateway resource's configuration.
# IAM Policy Attachment: AWS attaches an IAM policy to the newly created IAM role. This policy grants the necessary permissions for API Gateway to invoke the Lambda function. The policy includes permissions such as lambda:InvokeFunction on your Lambda function resource.
# Trust Relationship: AWS establishes a trust relationship between API Gateway and the newly created IAM role. This allows API Gateway to assume the role and execute the Lambda function.
# You can see the IAM role and policy in the AWS Management Console:

# IAM Console: Navigate to the IAM console.
# Roles: Look for a role with a name that matches your API Gateway resource's configuration. It typically follows the pattern: API-Gateway-Execution-Role-{region}-{api-id}.
# Role Policy: Within the role, you can view the attached IAM policy, which grants permissions for API Gateway to invoke your Lambda function.
# Keep in mind that giving API Gateway permission to invoke your Lambda function is essential for your API to work correctly. Without this permission, API Gateway would not be able to execute the Lambda function, and your API requests would fail.


  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'lambda-function'
      Description: AWS Lambda function
      # Role: !GetAtt LambdaIamRole.Arn
      Role: arn:aws:iam::047989593255:role/service-role/tomasz-api-hello-world-role-53pra235
      Runtime: python3.12
      Handler: index.handler
      Code:
        ZipFile: |
          def handler(event, context):
            response = {
              'isBase64Encoded': False,
              'statusCode': 200,
              'headers': {},
              'multiValueHeaders': {},
              'body': 'Hello, World!'
            }
            return response          
      MemorySize: 256
      Timeout: 60

  # LambdaIamRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: 'Allow'
  #           Principal:
  #             Service:
  #               - 'lambda.amazonaws.com'
  #           Action:
  #             - 'sts:AssumeRole'
  #     Path: '/'
